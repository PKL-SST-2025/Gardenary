import { createSignal, onMount, JSX, onCleanup, Show, Component } from "solid-js";
import { plants, fetchUserPlants, updateStatus } from "../data/plantstore";
import type { Plant } from "../data/plant";
import profile from "../assets/profile.png";
import { getTodayDate } from "../data/date";
import { selectedDate } from "../data/calendarStore";
import { user } from "../data/authStore";
import { useNavigate } from "@solidjs/router";

// Calculate plant age in days
function calculatePlantAge(plantedDate: Date, currentDateStr: string) {
  const currentDate = new Date(currentDateStr);
  const diffTime = currentDate.getTime() - plantedDate.getTime();
  return Math.floor(diffTime / (1000 * 60 * 60 * 24));
}

const List: Component = () => {
  const navigate = useNavigate();
  const [sidebarOpen, setSidebarOpen] = createSignal(false);
  const [showProfileMenu, setShowProfileMenu] = createSignal(false);
  const [isLoading, setIsLoading] = createSignal(true);
  let profileRef: HTMLDivElement | undefined;

  const handleStatusUpdate = async (plantId: string, statusType: string) => {
    try {
      await updateStatus(plantId, statusType);
    } catch (error) {
      console.error('Failed to update plant status:', error);
      alert('Failed to update plant status. Please try again.');
    }
  };

  onMount(async () => {
    const currentUser = user();
    if (!currentUser) {
      navigate('/login');
      return;
    }

    try {
      await fetchUserPlants();
    } finally {
      setIsLoading(false);
    }

    const handleClickOutside = (e: MouseEvent) => {
      if (profileRef && !profileRef.contains(e.target as Node)) {
        setShowProfileMenu(false);
      }
    };
    document.addEventListener("click", handleClickOutside);
    onCleanup(() => document.removeEventListener("click", handleClickOutside));
  });

  return (
    <div class="flex min-h-screen bg-green-50">
      {/* Sidebar */}
      <div
        class={`fixed z-40 top-0 left-0 h-screen overflow-y-auto transition-transform duration-300 bg-lime-100 w-48 p-4 ${
          sidebarOpen() ? "translate-x-0" : "-translate-x-full"
        } md:translate-x-0 md:static md:sticky md:top-0`}
      >
        <a href="/" class="font-bold border-b pb-2 block text-xl text-green-900">
          Gardenary
        </a>
        <nav class="space-y-2 text-green-900 mt-4">
          <a href="/dashboard" class="flex items-center gap-2 hover:underline">🏠 Dashboard</a>
          <a href="/list" class="flex items-center gap-2 hover:underline font-bold text-green-800">📋 List</a>
          <a href="/add" class="flex items-center gap-2 hover:underline">➕ Add</a>
          <a href="/growth" class="flex items-center gap-2 hover:underline">📈 Growth</a>
        </nav>
      </div>

      {/* Main Content */}
      <div class="flex-1 p-4">
        {/* Header */}
        <header class="flex justify-between items-center mb-6">
          <button
            onClick={() => setSidebarOpen(!sidebarOpen())}
            class="md:hidden text-green-800"
          >
            ☰
          </button>
          <div class="relative" ref={profileRef}>
            <button
              onClick={() => setShowProfileMenu(!showProfileMenu())}
              class="flex items-center space-x-2"
            >
              <img
                src={profile}
                alt="Profile"
                class="w-8 h-8 rounded-full border-2 border-green-500"
              />
              <span class="text-green-800">{user()?.name || 'User'}</span>
            </button>
            <Show when={showProfileMenu()}>
              <div class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1">
                <a
                  href="/profile"
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  Profile
                </a>
                <a
                  href="/settings"
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  Settings
                </a>
                <button
                  onClick={() => {
                    navigate('/login');
                  }}
                  class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  Logout
                </button>
              </div>
            </Show>
          </div>
        </header>

        {/* Plant List */}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <Show
            when={!isLoading()}
            fallback={<div class="text-center">Loading plants...</div>}
          >
            {plants().map((plant) => {
              const today = getTodayDate();
              const todayStatus = plant.status[today] || {
                watered: false,
                fertilized: false,
                harvested: false,
              };
              
              return (
                <div class="bg-white rounded-lg shadow-md p-4">
                  <div class="aspect-w-1 aspect-h-1 mb-4">
                    <img
                      src={plant.image}
                      alt={plant.name}
                      class="w-full h-32 object-cover rounded-md"
                    />
                  </div>
                  <h3 class="text-lg font-semibold text-green-800">{plant.name}</h3>
                  <p class="text-sm text-gray-600">Type: {plant.type}</p>
                  <p class="text-sm text-gray-600">
                    Age: {calculatePlantAge(new Date(plant.plantedDate), today)} days
                  </p>
                  <div class="mt-4 flex space-x-2">
                    <button
                      onClick={() => handleStatusUpdate(plant.id.toString(), 'watered')}
                      class={`px-3 py-1 rounded ${
                        todayStatus.watered
                          ? "bg-blue-500 text-white"
                          : "bg-gray-200 text-gray-700"
                      }`}
                      title="Water plant"
                    >
                      💧
                    </button>
                    <button
                      onClick={() => handleStatusUpdate(plant.id.toString(), 'fertilized')}
                      class={`px-3 py-1 rounded ${
                        todayStatus.fertilized
                          ? "bg-green-500 text-white"
                          : "bg-gray-200 text-gray-700"
                      }`}
                      title="Fertilize plant"
                    >
                      🌱
                    </button>
                    <button
                      onClick={() => handleStatusUpdate(plant.id.toString(), 'harvested')}
                      class={`px-3 py-1 rounded ${
                        todayStatus.harvested
                          ? "bg-yellow-500 text-white"
                          : "bg-gray-200 text-gray-700"
                      }`}
                      title="Mark as ready for harvest"
                    >
                      🌾
                    </button>
                  </div>
                </div>
              );
            })}
          </Show>
        </div>
      </div>
    </div>
  );
};

export default List;
